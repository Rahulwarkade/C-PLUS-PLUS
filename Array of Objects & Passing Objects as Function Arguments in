#include<iostream>
using namespace std;
// class Employee
// {
  /*An array of Objects in C++
An array of objects is declared the same as any other data-type array.  An array of objects consists of class objects as its elements. If the array consists of class objects it is called an array of objects.
class Employee
{
    int id;
    int salary;

public:
    void setId(void)
    {
        salary = 122;
        cout << "Enter the id of employee" << endl;
        cin >> id;
    }

    void getId(void)
    {
        cout << "The id of this employee is " << id << endl;
    }
};*/
//   int id;
//   int salary;
//   public:
//     void setData(){
//       salary=100000;
//       cout<<"Enter your number "<<endl;
//       cin>>id;
//     }
//     void getData(){
//       cout<<"This is your id "<<id<<"This is your salary"<<salary<<endl;
//     }
// };
// int main(){
//   Employee fb[6];
//   for(int i=0; i<=5; i++){
//     fb[i].setData();
//     fb[i].getData();
//   }
// }
// passing objects as a function arguments
// Objects can be passed as function arguments. This is useful when we want to assign the values of a passed object to the current object.
class Complex{
  int a;
  int b;
  public:
    void setData(int v1,int v2){
      a=v1;
      b=v2;
    }
    void setDataBySum(Complex o1, Complex o2){
      a = o1.a + o2.a;
      b = o1.b + o2.b;
    }
    void printComplex(){
      cout<<"This is your complex number "<<a<<" + "<<b<<" i "<<endl;
    }
    };
    int main(){
      Complex c1,c2,c3;
      c1.setData(1,2);
      c1.printComplex();
      c2.setData(3,4);
      c2.printComplex();
      c3.setDataBySum(c1,c2);
      c3.printComplex();
    }
